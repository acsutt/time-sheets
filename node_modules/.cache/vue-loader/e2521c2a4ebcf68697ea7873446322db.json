{"remainingRequest":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\src\\App.vue","mtime":1638294928967},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}