{"remainingRequest":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\src\\components\\Register.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\src\\components\\Register.vue","mtime":1637105957171},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\adams\\Documents\\uni\\ArchFrameApp\\time-sheets\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoucmVxdWlyZWQ6YWZ0ZXIgewogICAgY29udGVudDoiICoiOwogICAgY29sb3I6IHJlZDsKfQo="},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"row justify-content-center\">\r\n        <div class=\"col-md-6\">\r\n            <h3 class=\"text-center\">Register</h3>\r\n            <form @submit.prevent=\"handleSubmitForm\">\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">First name</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"user.firstName\" :class=\"{ 'is-invalid': submitted && $v.user.firstName.$error }\">\r\n                    <div v-if=\"submitted && !$v.user.firstName.required\" class=\"invalid-feedback\">First Name is required</div>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Surname</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"user.lastName\" :class=\"{ 'is-invalid': submitted && $v.user.lastName.$error }\">\r\n                    <div v-if=\"submitted && !$v.user.firstName.required\" class=\"invalid-feedback\">Surname is required</div>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Email</label>\r\n                    <input type=\"email\" class=\"form-control\" v-model=\"user.email\" :class=\"{ 'is-invalid': submitted && $v.user.email.$error }\">\r\n                    <div v-if=\"submitted && $v.user.email.$error\" class=\"invalid-feedback\">\r\n                        <span v-if=\"!$v.user.email.required\">Email is required</span>\r\n                        <span v-if=\"!$v.user.email.email\">Email is invalid</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Username</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"user.username\" :class=\"{ 'is-invalid': submitted && $v.user.username.$error }\">\r\n                    <div v-if=\"submitted && $v.user.username.$error\" class=\"invalid-feedback\">\r\n                        <span v-if=\"!$v.user.username.required\">Username is required</span>\r\n                        <span v-if=\"!$v.user.username.minLength\">Username must be at least 4 characters</span>\r\n                        <span v-else-if=\"!$v.user.username.isUnique\">Username must be unique</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Password</label>\r\n                    <input type=\"password\" class=\"form-control\" v-model=\"user.password\" :class=\"{ 'is-invalid': submitted && $v.user.password.$error }\">\r\n                    <div v-if=\"submitted && $v.user.password.$error\" class=\"invalid-feedback\">\r\n                        <span v-if=\"!$v.user.password.required\">Password is required</span>\r\n                        <span v-if=\"!$v.user.password.minLength\">Password must be at least 6 characters</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Confirm Password</label>\r\n                    <input type=\"password\" class=\"form-control\" v-model=\"user.confirmPassword\" :class=\"{ 'is-invalid': submitted && $v.user.confirmPassword.$error }\">\r\n                    <div v-if=\"submitted && $v.user.confirmPassword.$error\" class=\"invalid-feedback\">\r\n                        <span v-if=\"!$v.user.confirmPassword.required\">Confirm Password is required</span>\r\n                        <span v-if=\"!$v.user.confirmPassword.minLength\">Confirm Password must be at least 6 characters</span>\r\n                        <span v-else-if=\"!$v.user.confirmPassword.sameAsPassword\">Passwords must match</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <button class=\"btn btn-success btn-block\">Register</button>\r\n                </div>\r\n            </form>\r\n\r\n            \r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from \"axios\"\r\n    import { required, email, minLength, sameAs } from 'vuelidate/lib/validators'\r\n\r\n    export default {\r\n        data() {\r\n            return {\r\n                user: {\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    email: '',\r\n                    username: '',\r\n                    password: '',\r\n                    confirmPassword: '',\r\n                },\r\n                submitted: false,\r\n                Users: [],\r\n                usernameList: [],\r\n            }\r\n        },\r\n        validations: {\r\n            user: {\r\n                firstName: { required },\r\n                lastName: { required },\r\n                email: { required, email },\r\n                username: { required, minLength: minLength(4), isUnique(username){\r\n                    for ( let index in this.Users ) {\r\n                        if (username === this.Users[index].username) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;}},\r\n                password: {required, minLength: minLength(6) },\r\n                confirmPassword: {required, sameAsPassword: sameAs('password'), minLength: minLength(6) },\r\n            },\r\n        },\r\n        created() {\r\n            let apiURL = 'http://localhost:4000/user-api';\r\n            axios.get(apiURL).then(res => {\r\n                this.Users = res.data;\r\n            }).catch(error => {\r\n                console.log(error)\r\n            });\r\n        },\r\n        methods: {\r\n            handleSubmitForm() {\r\n                this.submitted = true;\r\n                this.$v.$touch();\r\n                if (this.$v.$invalid) {\r\n                    return;\r\n                }\r\n\r\n                let apiURL = 'http://localhost:4000/user-api/create-user';\r\n                \r\n                axios.post(apiURL, this.user).then(() => {\r\n                  this.$router.push('/login')\r\n                  this.user = {\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    username: '',\r\n                    email: '',\r\n                    password: ''\r\n                  }\r\n                }).catch(error => {\r\n                    console.log(error)\r\n                });\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n    .required:after {\r\n        content:\" *\";\r\n        color: red;\r\n    }\r\n</style>"]}]}